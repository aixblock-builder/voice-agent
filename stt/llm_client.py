import asyncio
import json
import ssl
from typing import Callable, Dict, Optional
from socket_utils import ConnectionManager
import websockets
from websockets.client import WebSocketClientProtocol
import httpx

TTS_HTTP_URL = "http://localhost:8002/tts-only"

class LLMClient:
    """
    Qu·∫£n l√Ω k·∫øt n·ªëi l√¢u d√†i ƒë·∫øn LLM, x·ª≠ l√Ω stream token v√† ƒëi·ªÅu ph·ªëi
    c√°c ph·∫£n h·ªìi.
    """
    def __init__(self, uri: str, manager: ConnectionManager, on_response_callback: Callable):
        """
        Kh·ªüi t·∫°o client.
        
        Args:
            uri (str): ƒê·ªãa ch·ªâ WebSocket c·ªßa LLM.
            on_response_callback (Callable): M·ªôt h√†m async s·∫Ω ƒë∆∞·ª£c g·ªçi khi
                                            nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß t·ª´ LLM.
                                            H√†m n√†y c·∫ßn nh·∫≠n (client_id, response_text).
        """
        self.uri = uri
        self.on_response_callback = on_response_callback
        self.manager = manager
        self.websocket: Optional[WebSocketClientProtocol] = None
        # D√πng ƒë·ªÉ gh√©p c√°c token cho m·ªói y√™u c·∫ßu
        self.response_buffers: Dict[str, str] = {}
        # C·∫•u h√¨nh SSL (ch·ªâ cho m√¥i tr∆∞·ªùng test)
        self.is_running = False
        self.pending_futures: Dict[str, asyncio.Future] = {}

    async def connect_and_listen(self):
        """
        T√°c v·ª• n·ªÅn: K·∫øt n·ªëi, l·∫Øng nghe vƒ©nh vi·ªÖn v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i.
        """
        self.is_running = True
        while self.is_running:
            try:
                print("LLMClient: ƒêang k·∫øt n·ªëi t·ªõi LLM...")
                async with websockets.connect(self.uri) as ws:
                    self.websocket = ws
                    print("‚úÖ LLMClient: K·∫øt n·ªëi th√†nh c√¥ng t·ªõi LLM.")
                    
                    # V√≤ng l·∫∑p l·∫Øng nghe tin nh·∫Øn t·ª´ LLM
                    async for message_str in self.websocket:
                        await self._handle_incoming_message(message_str)

            except (websockets.exceptions.ConnectionClosedError, ConnectionRefusedError) as e:
                print(f"üîå LLMClient: M·∫•t k·∫øt n·ªëi t·ªõi LLM. L·ªói: {e}. Th·ª≠ l·∫°i sau 5 gi√¢y...")
            except Exception as e:
                print(f"‚ùå LLMClient: L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}. Th·ª≠ l·∫°i sau 5 gi√¢y...")
            if not self.is_running:
                break
            
            self.websocket = None
            await asyncio.sleep(5)
        print("LLMClient: ƒê√£ d·ª´ng t√°c v·ª• n·ªÅn.")

    async def _handle_incoming_message(self, message: str):
        """
        X·ª≠ l√Ω t·ª´ng tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c t·ª´ LLM, gh√©p token v√† g·ªçi callback khi ho√†n t·∫•t.
        """
        try:
            # Gi·∫£ ƒë·ªãnh LLM tr·∫£ v·ªÅ JSON ch·ª©a client_id v√† token
            data = json.loads(message)
            client_id = data.get("client_id")
            token = data.get("token")

            if not client_id or token is None:
                return

            # N·∫øu kh√¥ng ai ch·ªù k·∫øt qu·∫£ c·ªßa client_id n√†y ‚Üí b·ªè qua
            if client_id not in self.pending_futures:
                return

            buf = self.response_buffers.setdefault(client_id, "")

            # N·∫øu l√† token k·∫øt th√∫c
            if token == "[DONE]":
                full = self.response_buffers.pop(client_id, "")
                print(f"LLMClient: Ho√†n t·∫•t ph·∫£n h·ªìi cho client '{client_id}'.")
                # ‚ñ∫ Tr·∫£ k·∫øt qu·∫£ cho pipeline n·∫øu c√≥ Future ƒëang ch·ªù
                fut = self.pending_futures.get(client_id)
                if fut and not fut.done():
                    fut.set_result(full)
                else:
                    # fallback: g·ªçi callback c≈© (n·∫øu b·∫°n v·∫´n mu·ªën h·ªó tr·ª£ ƒë∆∞·ªùng c≈©)
                    await self.on_response_callback(client_id, full, self.manager)
            # N·∫øu l√† token b√¨nh th∆∞·ªùng
            else:
                self.response_buffers[client_id] = buf + token

        except json.JSONDecodeError:
            print(f"LLMClient: L·ªói - Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn kh√¥ng ph·∫£i JSON: {message}")
        except Exception as e:
            print(f"LLMClient: L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {e}")

    def cleanup_fn(self, client_id):
        fut = self.pending_futures.pop(client_id, None)
        if fut and not fut.done():
            fut.cancel()
        self.response_buffers.pop(client_id, None)

    async def request_response(self, client_id: str, text: str):
        """
        G·ª≠i m·ªôt y√™u c·∫ßu m·ªõi ƒë·∫øn LLM qua k·∫øt n·ªëi ƒëang c√≥.
        """
        if not self.websocket:
            print("LLMClient: L·ªói - Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu, ch∆∞a k·∫øt n·ªëi t·ªõi LLM.")
            return
        loop = asyncio.get_running_loop()
        fut = loop.create_future()
        self.pending_futures[client_id] = fut
        payload = {
            "client_id": client_id,
            "text": text
        }
        await self.websocket.send(json.dumps(payload))
        print(f"LLMClient: ƒê√£ g·ª≠i y√™u c·∫ßu cho client '{client_id}'.")
        try:
            return await fut
        except Exception as e:
            print(f"LLMClient: L·ªói khi g·ª≠i y√™u c·∫ßu: {e}")
        finally:
            self.pending_futures.pop(client_id, None)

    async def close(self):
        """
        Ng·∫Øt k·∫øt n·ªëi WebSocket v√† d·ª´ng t√°c v·ª• n·ªÅn m·ªôt c√°ch an to√†n.
        """
        print("LLMClient: B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë√≥ng...")
        self.is_running = False # B√°o cho v√≤ng l·∫∑p connect_and_listen d·ª´ng l·∫°i
        if self.websocket:
            await self.websocket.close(code=1000, reason='Client shutting down')
            print("LLMClient: K·∫øt n·ªëi WebSocket ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")

async def llm_tts_pipeline(client_id, prompt, llm_client, manager):
    try:
        response_text = await llm_client.request_response(client_id, prompt)
        if not response_text:
            await manager.send_json_to_client({"error": "LLM returned empty."}, client_id)
            return
        await get_audio_from_tts_service(client_id, response_text, manager)
    except asyncio.CancelledError:
            # Task b·ªã hu·ª∑ khi user g·ª≠i prompt m·ªõi ‚Üí im l·∫∑ng tho√°t
            print(f"[PIPE] Pipeline client {client_id} b·ªã hu·ª∑ (prompt m·ªõi).")
    except Exception as e:
        print(f"[PIPE] L·ªói pipeline: {e}")
        await manager.send_json_to_client({"error": "Internal pipeline error"}, client_id)

async def handle_llm_response(client_id: str, response_text: str, manager: ConnectionManager):
    """
    H√†m n√†y ƒë∆∞·ª£c g·ªçi khi c√≥ ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß t·ª´ LLM.
    N√≥ s·∫Ω k√≠ch ho·∫°t b∆∞·ªõc ti·∫øp theo: y√™u c·∫ßu TTS t·∫°o gi·ªçng n√≥i.
    """
    print(f"Gateway: Nh·∫≠n text t·ª´ LLM cho client '{client_id}', g·ª≠i qua TTS...")
    task = asyncio.create_task(get_audio_from_tts_service(client_id, response_text, manager))
    manager.set_tts_task(client_id, task)

async def get_audio_from_tts_service(client_id: str, text: str, manager: ConnectionManager):
    """
    H√†m n√†y g·ªçi ƒë·∫øn TTS service qua HTTP v√† stream ph·∫£n h·ªìi v·ªÅ cho client.
    """
    params = {
        "client_id": client_id,
        "text": text,
        "speaker_wav": "example_female.wav",
        "language": "en"
    }
    
    try:
        # S·ª≠ d·ª•ng httpx.AsyncClient ƒë·ªÉ th·ª±c hi·ªán streaming request
        async with httpx.AsyncClient(timeout=None) as client:
            async with client.stream("GET", TTS_HTTP_URL, params=params) as response:
                print(f"Gateway: B·∫Øt ƒë·∫ßu nh·∫≠n stream t·ª´ TTS cho client '{client_id}'")
                
                # ƒê·ªçc t·ª´ng d√≤ng trong stream (m·ªói d√≤ng l√† m·ªôt JSON)
                async for line in response.aiter_lines():
                    if line:
                        try:
                            # Parse JSON v√† g·ª≠i v·ªÅ frontend qua WebSocket
                            json_data = json.loads(line)
                            json_data["type"] = "audio"
                            await manager.send_json_to_client(json_data, client_id)
                        except json.JSONDecodeError:
                            print(f"Gateway: L·ªói khi parse JSON t·ª´ TTS: {line}")
                            # G·ª≠i tin nh·∫Øn l·ªói v·ªÅ cho client
                            await manager.send_json_to_client({"error": "Invalid JSON from TTS."}, client_id)
    
    except asyncio.CancelledError:
        print(f"[TTS] Stream b·ªã h·ªßy gi·ªØa ch·ª´ng cho client {client_id}")
        raise
                            
    except httpx.RequestError as e:
        print(f"Gateway: L·ªói khi g·ªçi ƒë·∫øn TTS service: {e}")
        # G·ª≠i tin nh·∫Øn l·ªói v·ªÅ cho client
        await manager.send_json_to_client({"error": "TTS service is unavailable."}, client_id)